generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id        String      @id
  user_type user_type?  @default(unknown)
  dashboard dashboard[]
  responses responses[]
}

model dashboard {
  id            Int         @id @default(autoincrement())
  name          String
  user_id       String
  department_id Int
  users         users       @relation(fields: [user_id], references: [id])
  departments   departments @relation(fields: [department_id], references: [id])
  questions     questions[]
  responses     responses[]
}

model hospitals {
  id              Int           @id @default(autoincrement())
  name            String
  health_board_id Int
  health_boards   health_boards @relation(fields: [health_board_id], references: [id])
  departments     departments[]
}

model questions {
  id            Int             @id @default(autoincrement())
  default_url   String
  standard_id   Int
  body          String
  type          question_type
  archived      Boolean?        @default(false)
  dashboard_id  Int
  dashboard     dashboard       @relation(fields: [dashboard_id], references: [id])
  standards     standards       @relation(fields: [standard_id], references: [id])
  question_urls question_urls[]
  words         words[]
}

model responses {
  id                   Int         @id @default(autoincrement())
  user_id              String
  timestamp            DateTime
  department_id        Int
  is_mentoring_session Boolean
  dashboard_id         Int?
  dashboard            dashboard?  @relation(fields: [dashboard_id], references: [id])
  departments          departments @relation(fields: [department_id], references: [id])
  users                users       @relation(fields: [user_id], references: [id])
  scores               scores[]
  words                words[]
}

model scores {
  response_id Int
  standard_id Int
  score       Int
  responses   responses @relation(fields: [response_id], references: [id])
  standards   standards @relation(fields: [standard_id], references: [id])

  @@id([response_id, standard_id])
}

model standards {
  id        Int         @id @default(autoincrement())
  name      String
  questions questions[]
  scores    scores[]
}

model words {
  id          Int       @id @default(autoincrement())
  response_id Int
  word        String
  question_id Int
  questions   questions @relation(fields: [question_id], references: [id])
  responses   responses @relation(fields: [response_id], references: [id])
}

model health_boards {
  id        Int         @id @default(autoincrement())
  name      String
  hospitals hospitals[]
}

model departments {
  id                    Int                    @id @default(autoincrement())
  name                  String
  hospital_id           Int
  archived              Boolean?               @default(false)
  hospitals             hospitals              @relation(fields: [hospital_id], references: [id])
  dashboard             dashboard[]
  clinician_join_codes  clinician_join_codes?
  department_join_codes department_join_codes?
  question_urls         question_urls[]
  responses             responses[]
}

model question_urls {
  question_id   Int
  department_id Int
  url           String
  departments   departments @relation(fields: [department_id], references: [id])
  questions     questions   @relation(fields: [question_id], references: [id])

  @@id([question_id, department_id])
}

model clinician_join_codes {
  department_id Int         @id
  code          String
  departments   departments @relation(fields: [department_id], references: [id])
}

model department_join_codes {
  department_id Int         @id
  code          String
  departments   departments @relation(fields: [department_id], references: [id])
}

enum question_type {
  likert_scale
  words
}

enum user_type {
  unknown
  platform_administrator
  health_board
  hospital
  department_manager
  clinician
}
